using System;
using system.collection.generic;
using system.linq;


namespace Shapes
{
    class Program
    {
        static void Main(string[] args)
        {
            Console.WriteLine("Choose a shape:");
            Console.WriteLine("1. Triangle");
            Console.WriteLine("2. Square");
            Console.WriteLine("3. Rectangle");
            Console.WriteLine("4. Circle");
            Console.WriteLine("5. Trapezoid");
            Console.WriteLine("6.shishzeli");

            int choice = int.Parse(Console.ReadLine());

            Shape shape;
            switch (choice)
            {
                case 1:
                    shape = new Triangle();
                    break;
                case 2:
                    shape = new Square();
                    break;
                case 3:
                    shape = new Rectangle();
                    break;
                case 4:
                    shape = new Circle();
                    break;
                case 5:
                    shape = new Trapezoid();
                    break;
                case 6:
                    shape = new shishzeli();
                    break;
                default:
                    Console.WriteLine("Invalid choice.");
                    return;
            }

            Console.WriteLine($"Area: {shape.Area()}");
            Console.WriteLine($"Perimeter: {shape.Perimeter()}");
        }
    }

    abstract class Shape
    {
        public abstract double Area();

        public abstract double Perimeter();
    }

    class Triangle : Shape
    {
        private double side1, side2, side3;

        public Triangle()
        {
            Console.Write("Enter side 1: ");
            side1 = double.Parse(Console.ReadLine());
           
            Console.Write("Enter side 2: ");
            side2 = double.Parse(Console.ReadLine());
           
            Console.Write("Enter side 3: ");
            side3 = double.Parse(Console.ReadLine());
        }

        public override double Area()
        {
            double s = (side1 + side2 + side3) / 2;
           
            return Math.Sqrt(s * (s - side1) * (s - side2) * (s - side3));
        }

        public override double Perimeter()
        {
            return side1 + side2 + side3;
        }
    }

    class Square : Shape
    {
        private double side;

        public Square()
        {
            Console.Write("Enter side: ");
            side = double.Parse(Console.ReadLine());
        }

        public override double Area()
        {
            return side * side;
        }

        public override double Perimeter()
        {
            return 4 * side;
        }
    }

    class Rectangle : Shape
    {
        private double length, width;

        public Rectangle()
        {
            Console.Write("Enter length: ");
            length = double.Parse(Console.ReadLine());
           
            Console.Write("Enter width: ");
            width = double.Parse(Console.ReadLine());
        }

        public override double Area()
        {
            return length * width;
        }

        public override double Perimeter()
        {
            return 2 * (length + width);
        }
    }

    class Circle : Shape
    {
        private double radius;

        public Circle()
        {
            Console.Write("Enter radius: ");
            radius = double.Parse(Console.ReadLine());
       }

       public override double Area()
       {
           return Math.PI * radius * radius;
       }

       public override double Perimeter()
       {
           return 2 * Math.PI * radius;
       }
   }

   class Trapezoid : Shape
   {
       private double base1, base2, height, leg1, leg2;

       public Trapezoid()
       {
           Console.Write("Enter base 1: ");
           base1 = double.Parse(Console.ReadLine());

           Console.Write("Enter base 2: ");
